/*
 * Mystery.c
 * Fibonacci Series
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


int num[200];

int add(int a, int b){

    return a + b;

/*	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	%rdx, %rax
	popq	%rbp
- establishes %rdx and %rax as parameters and simply returns the sum of the two
*/
}

int dothething(int n){
    
/*
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	num(,%rax,8), %rax
- establishes  a local variable. Lets call it temp.
*/

    int temp;
    if(n > 200){  //checks bounds
        return 0;
    }
   

/*
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	num(,%rax,8), %rax
	cmpq	$-1, %rax
	je	.L4
	movq	-40(%rbp), %rax
	movq	num(,%rax,8), %rax
	jmp	.L5

- moves num of n into %rax and compares it to -1.  then it jumps to L4.
- After that, there is an unconditional jump to L5 which later is determined to be the return statement at the end of the function
*/

    if(num[n] == -1){

/*
.L4:
	movq	$-1, -24(%rbp)
	cmpq	$0, -40(%rbp)         //compares 0 then goes to L6
	jne	.L6
	movq	$0, -24(%rbp)
	jmp	.L7                     //unconditional jump to L7
.L6:
	cmpq	$1, -40(%rbp)       //compares 1 then goes to L8
	jne	.L8
	movq	$1, -24(%rbp)
	jmp	.L7

.L8:
	movq	-40(%rbp), %rax       //must be the else in an if-else statement
	subq	$2, %rax
	movq	%rax, %rdi
	call	dothething
	movq	%rax, %rbx
	movq	-40(%rbp), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	call	dothething
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	add
	movq	%rax, -24(%rbp)

- this creates if-else statements.  First we compare n to 0.  This jumps to L6 if they're not equal.
- then L4 moves 0 into num[n]
- L6 wants to do three things.  First it wants to compare 1 to n.  If not equal then jump to L8.
- Next L6 moves 1 into num[n].  The third thing it does is jump to L7.
- Now, L8 is where we handle business.  We recursivley call dothething twice and also call add.
-  We use n-2 and n-1 as inputs as indicated by the subq's under L8. */



        if(n == 0){
            num[n] = 0;
        }
        else if(n == 1){
            num[n] = 1;
        }
        else{
            num[n] = add(dothething(n-2),dothething(n-1));
        }

/*
.L7:
	movq	-40(%rbp), %rax
	movq	num(,%rax,8), %rax
	cmpq	$-1, %rax             //compares -1 and goes to L9
	jne	.L9
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, num(,%rax,8)
.L9:
	movq	-40(%rbp), %rax
	movq	num(,%rax,8), %rax

- L7 wants us to compare -1 to %rax an a condition of not equal so we can go straight to the end
- this is confusing at first, but I think it's saying to just set num[n] = temp
*/


        
    }
    num[n] = temp;

/*
L5:
	addq	$40, %rsp         //returns value
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret

- finishing up and returning temp
/*

    return temp;
}

int main(int argc, char ** argv){
    
*/
  addq	$8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	atoi
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L11

- calls atoi function and sets it equal to n
- moves on to L11
- sets i equal to 0
/*


    int n = atoi(argv[1]);


*/
.L12:
	movl	-4(%rbp), %eax
	cltq
	movq	$-1, num(,%rax,8)
	addl	$1, -4(%rbp)
.L11:
	cmpl	$199, -4(%rbp)
	jle	.L12
	movl	-8(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	dothething
	movq	%rax, %rsi
	movl	$.LC0, %edi
	movl	$0, %eax
	call	printf
	movl	$0, %eax
	leave

- creates a for loop with i less than or equal to 199
- moves -1 into num[%rax]
- forms print statement calling dothething
/*
    
    int i = 0;
    for(i = 0; i <= 199; i++){
        num[i] = -1;
    }

    printf("Result:  %d\n",dothething(n));
                    
    return 0;
